def subtract_str(first, second):

    # Reverse both lists
    first.reverse()
    second.reverse()

    # Add 0s to the end of the second number to match length
    digit_diff = len(first)-len(second)
    second = second+["0" for i in range(digit_diff)]
    
    first_ptr = 0
    second_ptr = 0
    carry = 0

    to_return = []

    for i, digit in enumerate(first):
        top_digit = int(digit) - carry
        bottom_digit = int(second[i])
        digit_subtract_result = top_digit-bottom_digit
        # If top was smaller than bottom, carry
        if digit_subtract_result < 0:
            digit_subtract_result += 10
            carry = 1
        else:
            carry = 0

        to_return.append(str(digit_subtract_result))

    if carry != 0:
        return "negative"

    else:
        to_return.reverse()
        return_str = "".join(to_return)
        return_str = return_str.lstrip("0")
        if return_str == "":
            return ['0']
        return list(return_str)
    

private_key = "1521354974820638234322036021907389891621488497300881937448846869956339560682233805306344821416296093793309298288885054126640261600949525001030180651504081357579915141066193401064123554149488044709109551813718912304251987575559647181443218001213505130061888312189327768086156317838992802950421585122130128553194467793907178561081876205252144425065946090581466765287871481964936375657230925607932044322858714704196802799800914162801432014486931543702274635296489393047569458743369542961465999290805532762093843847349920266373617534453763153454071107079582778348844535245088138596785250145942668026166250332484650232555856620553073850616496047945016722215611690593846515983705630467164344255154778959822553004225279962497418139332374011495634667858265998384978875816900536647502897762864495780619086613145125518213660169601993909824492810892638003548890240040465490412437960155947069276553364645969418618717311209786619835889097448401018777693464279089288345465589265205432405595716428644940694818635895839542087098185186906603143015630314768711741696258403938784130063513752124761944613868501956216752154529851447418501479665458707475939458813194801464284568079287229056980407327701684661327361936845589717365213518124806652476731675188891511086612172463023154352194066606740602678450330109668393181153788908453513899858598024621022891587514294245426350852899622763892045599959279400293038966764409367686963312437140211494742667097919068700349012243077001653080958533186778336062976235425641968"
public_key = "67759907009389347171057104497200275946496907769158454769078958568472116729089438085790889093981472247800767766039083814315367035218808149735933858822962796125361403917665088012046526350294837158455135157177629220875311186358274914812187062754126396499245350622310673438783722762596679440821039056398130851731908376157357591141605271167999213102795497544395858265258409257226553319997273259704321"


private_key = list(private_key)
public_key = list(public_key)
priv_len = len(private_key)
pub_len = len(public_key)
result = []

i = pub_len
remain = private_key[0:i]
first_loop = True

while i < priv_len:
    if not first_loop:
        remain.append(private_key[i])
    
    new_digit = 0

    # Tally number of times public key fits into substring
    while True:
        subtract_result = subtract_str(remain, public_key)
        if subtract_result != "negative":
            remain = subtract_result
            new_digit += 1
        else:
            break
    
    result.append(str(new_digit))
    if first_loop:
        first_loop = False
    else:
        i += 1

print("".join(remain))
print("".join(result))


